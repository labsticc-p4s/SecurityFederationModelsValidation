use org.openflexo.technologyadapter.emf.EMFModelSlot as EMF;
use org.openflexo.foundation.fml.rt.FMLRTVirtualModelInstanceModelSlot as FMLRT;

import org.openflexo.technologyadapter.emf.model.EMFModel;
import org.openflexo.technologyadapter.emf.model.EMFObjectIndividual;
import java.lang.String;

import ["http://www.example.org/metamodelProject/Metamodel/SOAMLmetaModel"] as SOAML_META_MODEL;
import ["http://www.example.org/metamodelProject/Metamodel/WSDLmetaModel"] as WSDLMETAMODEL;
import ["http://www.omg.org/spec/BPMN/20100524/MODEL-XMI"] as BPMN21;

import [BPMN21:"Participant"] as BPMN_PARTICIPANT;
import [SOAML_META_MODEL:"Participant"] as SOAML_PARTICIPANT;
import [BPMN21:"TextAnnotation"] as BPMN_TEXT_ANNOTATION;
import [BPMN21:"Association"] as BPMN_ASSOCIATION;
import [SOAML_META_MODEL:"ParticipantRole"] as SOAML_PARTICIPANT_ROLE;
import [SOAML_META_MODEL:"Operation"] as SOAML_OPERATION;
import [BPMN21:"DataObject"] as BPMN_DATAOBJECT;
import [WSDLMETAMODEL:"Element"] as WSDL_ELEMENT;
import [WSDLMETAMODEL:"Operation"] as WSDL_OPERATION;
import [WSDLMETAMODEL:"InPut"] as WSDL_INPUT;
import [WSDLMETAMODEL:"Binding"] as WSDL_BINDING;
import [WSDLMETAMODEL:"Fault"] as WSDL_FAULT;

typedef EMFObjectIndividualType(eClass = BPMN_PARTICIPANT) as BPMNParticipant;
typedef EMFObjectIndividualType(eClass = SOAML_PARTICIPANT) as SOAMLParticipant;
typedef EMFObjectIndividualType(eClass = BPMN_TEXT_ANNOTATION) as BPMNTextAnnotation;
typedef EMFObjectIndividualType(eClass = BPMN_ASSOCIATION) as BPMNAssociation;
typedef EMFObjectIndividualType(eClass = SOAML_PARTICIPANT_ROLE) as SOAMLParticipantRole;
typedef EMFObjectIndividualType(eClass = BPMN_DATAOBJECT) as BPMNDataObject;
typedef EMFObjectIndividualType(eClass = WSDL_ELEMENT) as WSDLElement;
typedef EMFObjectIndividualType(eClass = WSDL_OPERATION) as WSDLOperation;
typedef EMFObjectIndividualType(eClass = WSDL_INPUT) as WSDLInPut;
typedef EMFObjectIndividualType(eClass = WSDL_BINDING) as WSDLBinding;
typedef EMFObjectIndividualType(eClass = WSDL_FAULT) as WSDLFault;
typedef EMFObjectIndividualType(eClass = SOAML_OPERATION) as SOAMLOperation;

@URI("http://www.openflexo.org/projects/2024/2/HlidayBookingFederation1_1708967384458.prj/HolidayBookingSecurityFederation.fml")
@Author("chahr")
public model HolidayBookingSecurityFederation {

    EMFModel soamlModelAccess with EMFModelSlot(metaModel = SOAML_META_MODEL, isRequired = true);
    EMFModel wsdlModelAcess with EMFModelSlot(metaModel = WSDLMETAMODEL, isRequired = true);
    EMFModel bpmnModelAccess with EMFModelSlot(metaModel = BPMN21, isRequired = true);

    public create::createAccessObject(required Resource<EMFModel> bpmnModelResource, required Resource<EMFModel> wsdlModelResource, required Resource<EMFModel> soamlModelResource) {
        soamlModelAccess = parameters.soamlModelResource.resourceData;
        wsdlModelAcess = parameters.wsdlModelResource.resourceData;
        bpmnModelAccess = parameters.bpmnModelResource.resourceData;
    }

    delete() {
        soamlModelAccess = null;
        wsdlModelAcess = null;
        bpmnModelAccess = null;
    }

    // Get the list of security annotations for the selected Pool in BPMN model
    private List<BPMNTextAnnotation> getPoolAnnotations(BPMNParticipant pool) {
        List<BPMNTextAnnotation> annotationsPool = new ArrayList<>();
        for (BPMNAssociation itemAsso : select BPMNAssociation from bpmnModelAccess) {
            if (itemAsso.targetRef == parameters.pool) {
                for (BPMNTextAnnotation itemAnnota : select BPMNTextAnnotation from bpmnModelAccess) {
                    if (itemAnnota == itemAsso.sourceRef) {
                        annotationsPool.add(itemAnnota);
                    }
                }
            }
        }
        return annotationsPool;
    }

    // Check if the DataObject in the BPMN model contains security annotations (integrity, NonRepudiation)
    private boolean checkDataObjectSecurityAnnotations(BPMNDataObject dataObject) {
        for (BPMNAssociation itemAsso : select BPMNAssociation from bpmnModelAccess) {
            if (itemAsso.targetRef == parameters.dataObject) {
                for (BPMNTextAnnotation itemAnnota : select BPMNTextAnnotation from bpmnModelAccess) {
                    if (itemAnnota == itemAsso.sourceRef && (itemAnnota.text.contains("integrity") || itemAnnota.text.contains("nonrepudiation"))) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    // Check if the binding parameter of the WSDL operation has an encryption mechanism
    private boolean checkFaultBinding(WSDLElement element) {
        for (WSDLOperation operation : select WSDLOperation from wsdlModelAcess) {
            List<? extends Object> itemInputOperation = operation.getValues("input");
            for (WSDLInPut itemInPut : select WSDLInPut from wsdlModelAcess) {
                List<? extends Object> itemElementInput = itemInPut.getValues("element");
                if (itemInputOperation.contains(itemInPut) && itemElementInput.contains(parameters.element)) {
                    for (WSDLBinding itemBinding : select WSDLBinding from wsdlModelAcess) {
                        List<? extends Object> itemBindingOperation = itemBinding.getValues("operation");
                        if (itemBindingOperation.contains(operation) && itemBinding.getValues("fault").toString().contains("SOAP")) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }


   
// The correspondence between a Pool in the BPMN model and a Participant in the SOAML model
public concept PoolParticipantCorrespondence {

    BPMNParticipant pool with EMFObjectRole(container=bpmnModelAccess, type=BPMN_PARTICIPANT);
    SOAMLParticipant participant with EMFObjectRole(container=soamlModelAccess, type=SOAML_PARTICIPANT);

    // Create the instance of the concept with the selected pool and Participant
    create(required String name) {
        pool = select unique BPMNParticipant from bpmnModelAccess where (selected.name == parameters.name);
        participant = select unique SOAMLParticipant from soamlModelAccess where (selected.name == parameters.name);
    }

    // --- Holiday Booking Security Rule1 and Rule2 ---

    /* This security rule checks if the pool in the BPMN model and the Participant in the SOAML model 
       contain the correct security annotations. */
    public securityCheckAnnotations() {
        List<BPMNTextAnnotation> annotationsPool = new ArrayList<BPMNTextAnnotation>();
        annotationsPool = container.getPoolAnnotations(pool);
        boolean check = false;

        for (BPMNTextAnnotation item : annotationsPool) {
            for (SOAMLParticipantRole itemParticipantRole : select SOAMLParticipantRole from soamlModelAccess) {
                if (itemParticipantRole.name == participant.name + "Role") {
                    List<? extends Object> privacy = itemParticipantRole.getValues("Privacy");
                    List<? extends Object> access = itemParticipantRole.getValues("AccessControl");

                    if (privacy != null && item.text.contains("privacy")) {
                        check = true;
                    }
                    if (access != null && item.text.contains("accesscontrol")) {
                        check = true;
                    } else {
                        check = false;
                    }
                }
            }
        }

        if (check) {
           log "[HolidayBooking - SecurityRule 1] -> Security rule succeeded";
        } else {
            log "[HolidayBooking - SecurityRule 1] -> Security rule violated";
        }
    }
}

// The correspondence between a DataObject in the BPMN model and a Message in the WSDL model
public concept DataObjectMessageCorrespondence {

    BPMNDataObject dataObject with EMFObjectRole(container=bpmnModelAccess, type=BPMN_DATAOBJECT);
    WSDLElement element with EMFObjectRole(container=wsdlModelAcess, type=WSDL_ELEMENT);

    // Create the instance of the concept with the selected DataObject and WSDL element
    create(required String nameDataObject, required String nameElement) {
        dataObject = select unique BPMNDataObject from bpmnModelAccess where (selected.name == parameters.nameDataObject);
        element = select unique WSDLElement from wsdlModelAcess where (selected.name == parameters.nameElement);
    }

    delete() {
        delete dataObject;
        delete element;
    }

    // --- Holiday Booking Security Rule3 ---

    /* If a message in an operation in the WSDL model corresponds to a DataObject in the BPMN model tagged with the
       integrity annotation, then the binding parameter of the WSDL operation must use an encryption mechanism. */
    public checkSecurityDataTransmission() {
        boolean checkAnnotation = false;
        boolean checkBinding = false;
        checkAnnotation = container.checkDataObjectSecurityAnnotations(dataObject);
        checkBinding = container.checkFaultBinding(element);

        if (checkBinding && checkAnnotation) {
            log "[HolidayBooking - SecurityRule 3] -> Security rule succeeded";
        } else {
            log "[HolidayBooking - SecurityRule 4] -> Security rule violated";
        }
    }
}

// The correspondence between operations in the WSDL model and the SOAML model
public concept OperationsCorrespondence {

    WSDLOperation operationWsdl with EMFObjectRole(container=wsdlModelAcess, type=WSDL_OPERATION);
    SOAMLOperation operationSOAML with EMFObjectRole(container=soamlModelAccess, type=SOAML_OPERATION);

    create(required String nameOperationWsdl, required String nameOperationSOAML) {
        operationWsdl = select unique WSDLOperation from wsdlModelAcess where (selected.name == parameters.nameOperationWsdl);
        operationSOAML = select unique SOAMLOperation from soamlModelAccess where (selected.name == parameters.nameOperationSOAML);
    }

    // --- Holiday Booking Security Rule4 ---

    /* When the service interface in the SOAML model (which corresponds to the interface in the WSDL model) contains 
       an Access Control security annotation, every operation within the service interface must correspond to an operation 
       in the interface of the WSDL model. */

    public void verifyOperationsRule4() {
        List<WSDLOperation> operationWsdlList = new ArrayList<WSDLOperation>();
        List<SOAMLOperation> operationSoamlList = new ArrayList<SOAMLOperation>();
        boolean checkExistence = true;

        for (WSDLOperation item1 : operationWsdlList) {
            if (!operationSoamlList.contains(item1)) {
                checkExistence = false;
            }
        }

        if (checkExistence) {
            log "[HolidayBooking - SecurityRule 4] -> Security rule succeeded";
        } else {
            log "[HolidayBooking - SecurityRule 4] -> Security rule violated";
        }
    }

    delete() {
        delete operationWsdl;
        delete operationSOAML;
    }
}
      
   

}
