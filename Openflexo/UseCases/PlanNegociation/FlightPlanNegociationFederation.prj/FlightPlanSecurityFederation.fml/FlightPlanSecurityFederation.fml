use org.openflexo.technologyadapter.emf.EMFModelSlot as EMF;
use org.openflexo.foundation.fml.rt.FMLRTVirtualModelInstanceModelSlot as FMLRT;

import org.openflexo.technologyadapter.emf.model.EMFModel;
import org.openflexo.technologyadapter.emf.model.EMFObjectIndividual;
import java.lang.String;
import java.util.List;

import ["http://www.omg.org/spec/BPMN/20100524/MODEL-XMI"] as BPMN21;
import ["http://www.eclipse.org/uml2/5.0.0/UML"] as UML2;

import [UML2:"CommunicationPath"] as DEPLOYMENT_COMMUNICATION_PATH;
import [UML2:"Association"] as UML_ASSOCIATION;
import [BPMN21:"MessageFlow"] as BPMN_MESSAGE_FLOW;
import [BPMN21:"Association"] as BPMN_ASSOCIATION;
import [BPMN21:"ServiceTask"] as BPMN_Task;
import [BPMN21:"TextAnnotation"] as BPMN_TEXT_ANNOTATION;
import [BPMN21:"FlowElement"] as BPMN_FLOW_ELEMENTS;
import [BPMN21:"DataObject"] as BPMN_DATAOBJECT;
import [BPMN21:"Participant"] as BPMN_PARTICIPANT;
import [UML2:"Class"] as UML_CLASS;
import [UML2:"ElementImport"] as UML_ELEMENT_IMPORT;
import ["http://www.eclipse.org/uml2/5.0.0/UML"] as UML23;

typedef EMFObjectIndividualType(eClass=DEPLOYMENT_COMMUNICATION_PATH) as DeploymentCommunicationPath;
typedef EMFObjectIndividualType(eClass=UML_ASSOCIATION) as UMLAssociation;
typedef EMFObjectIndividualType(eClass=BPMN_ASSOCIATION) as BPMNAssociation;
typedef EMFObjectIndividualType(eClass=BPMN_TEXT_ANNOTATION) as BPMNTextAnnotation;
typedef EMFObjectIndividualType(eClass=BPMN_MESSAGE_FLOW) as BPMNMessageFlow;
typedef EMFObjectIndividualType(eClass=UML_CLASS) as UMLClass;
typedef EMFObjectIndividualType(eClass=UML_ELEMENT_IMPORT) as UMLElementImport;
typedef EMFObjectIndividualType(eClass=BPMN_DATAOBJECT) as BPMNDataObject;
typedef EMFObjectIndividualType(eClass=BPMN_PARTICIPANT) as BPMNParticipant;
typedef EMFObjectIndividualType(eClass=BPMN_FLOW_ELEMENTS) as BPMNFlowElements;
typedef EMFObjectIndividualType(eClass=BPMN_Task) as BPMNTask;

@URI("http://www.openflexo.org/projects/2024/1/FlightPlanNegociationFederation_1706652651621.prj/FlightPlanSecurityFederation.fml")
@Author("chahr")
public model FlightPlanSecurityFederation {

    EMFModel bpmnModelAccess with EMFModelSlot(metaModel=BPMN21, isRequired=true);
    EMFModel dataModelAccess with EMFModelSlot(metaModel=UML2, isRequired=true);
    EMFModel deployementModelAccess with EMFModelSlot(metaModel=UML2, isRequired=true);

    public create::createAccessObject(required Resource<EMFModel> bpmnModelResource, required Resource<EMFModel> dataModelResource, required Resource<EMFModel> deployementModelResource) {
        bpmnModelAccess = parameters.bpmnModelResource.resourceData;
        dataModelAccess = parameters.dataModelResource.resourceData;
        deployementModelAccess = parameters.deployementModelResource.resourceData;
    }

    delete() {
    }

    public concept Correspondences {
        String [0,*] annotationsCommPath;
        String [0,*] annotationsObject;
        String [0,*] annotationsClass;

        // --- Get the annotation for the selected CommunicationPath ---//
        private List<String> getAnnotationsCommunicationPath(EMFObjectIndividual commPath) {
            annotationsCommPath = null;
            for (DeploymentCommunicationPath itemPath : select DeploymentCommunicationPath from deployementModelAccess) {
                if (itemPath == parameters.commPath) {
                    for (Object itemCommPath : itemPath.getValues("ownedElement")) {
                        annotationsCommPath.add(itemCommPath.toString.substring(14).toString);
                    }
                }
            }
            return annotationsCommPath;
        }

        private String getAnnotationCommunicationPath1Test(EMFObjectIndividual commPath) {
            String elementImport = "";
            for (DeploymentCommunicationPath itemPath : select DeploymentCommunicationPath from deployementModelAccess) {
                if (itemPath == parameters.commPath) {
                    for (Object itemElementImport : itemPath.getValues("elementImport")) {
                        elementImport = itemElementImport.toString;
                    }
                }
            }
            return elementImport;
        }

        private List<String> getAnnotationsObjects(EMFObjectIndividual object) {
            annotationsObject = null;
            for (BPMNAssociation itemAsso : select BPMNAssociation from bpmnModelAccess) {
                if (itemAsso.targetRef == parameters.object) {
                    annotationsObject.add(itemAsso.sourceRef.toString.substring(15).toString);
                }
            }
            return annotationsObject;
        }

		private boolean checkClassSecurityAnnotation(DataClass class) {
   			if (parameters.class.getValues("ownedElement").toString.contains("Critical")) {
      			return true;
   			} 
			else {
      			return false;
     		}  
 		}

        private boolean verifySecurityAnnotation(List<String> annotaCommPath, List<String> annotaMessageFlow) {
            for (BPMNTextAnnotation itemAnnota : select BPMNTextAnnotation from bpmnModelAccess) {
                if (parameters.annotaMessageFlow.contains(itemAnnota.id)) {
                    if ((itemAnnota.text.contains("integrityMF") || itemAnnota.text.contains("confidentialityMF")) && parameters.annotaCommPath.contains("encrypted")) {
                        return true;
                    }
                }
            }
            return false;
        }

        private boolean verifySecurityAnnotationDataClass(List<String> annotaObjects1, List<String> annotaObject2) {
            for (BPMNTextAnnotation itemAnnota : select BPMNTextAnnotation from bpmnModelAccess) {
                if (parameters.annotaObject2.contains(itemAnnota.id)) {
                    log itemAnnota.text;
                    if ((itemAnnota.text.contains("IntegrityDO") || itemAnnota.text.contains("confidentialityDO") || itemAnnota.text.contains("PrivacyDO")) && parameters.annotaObjects1.contains("critical")) {
                        log itemAnnota.text;
                        return true;
                    }
                }
            }
            return false;
        }

        private List<String> getAnnotationClass(EMFObjectIndividual class) {
            for (UMLClass itemClasses : select UMLClass from dataModelAccess) {
                if (itemClasses.name == parameters.class) {
                    for (EMFObjectIndividualType(eClass=UML_ELEMENT_IMPORT) itemClass : itemClasses.elementImport) {
                        log itemClass.toString;
                        annotationsClass.add(itemClass.toString.substring(14).toString);
                    }
                }
            }
            return annotationsClass;
        }

        private boolean verifyPoolIncludeConfidentialData(EMFObjectIndividual pool) {
            for (BPMNParticipant participant : select BPMNParticipant from bpmnModelAccess) {
                if (participant == parameters.pool) {
                    log participant.toString;
                    int n = participant.processRef.flowElements.size();
                    for (BPMNFlowElements element : select BPMNFlowElements from bpmnModelAccess) {
                        if (element instanceof BPMNDataObject) {
                            log "element" + element.toString;
                        }
                    }
                }
            }
            return true;
        }

        private boolean checkSecurityAnnotationModels(DeploymentModel deploymentModel) {
            if (parameters.deploymentModel.getValues("securityproperties").toString.contains("secureDependency")) {
                for (DataClass itemClass : select DataClass from dataModelAccess) {
                    if (itemClass.getValues("ownedElement").toString.contains("Critical")) {
                        return true;
                    }
                }
            }
            return false;
        }

        private boolean checkSecurityAnnotationModel(DataModel dataModel) {
            if (parameters.dataModel.getValues("ownedElement").toString.contains("SecureLink")) {
                return true;
            }
            return false;
        }

        private boolean checkAssociationAnnotation() {
            for (DeploymentAssociation association : select DeploymentAssociation from deploymentModelAccess) {
                if (association.getValues("secrecy") != null || association.getValues("integrity") != null) {
                    return true;
                }
            }
            return false;
        }

		private boolean checkSecurityAnnotationsOnAssociation(DataClass class, DataClass class1 ) {
			for (DataAssociationClass association : select DataAssociationClass from dataModelAccess) {
			  if (association.getValues("redefinedClassifier").toString.contains(parameters.class.name) && association.getValues("redefinedClassifier").toString.contains(parameters.class1.name) && (association.getValues("ownedElement").toString.contains("Integrity") || association.getValues("ownedElement").toString.contains("Secrecy"))) {
				 return true;
			  }
			}
		   return false;
		}
    }

    public concept MessageFlowCommunicationPathCorrespondences extends Correspondences {
        EMFObjectIndividual messageFlow with EMFObjectRole(container=bpmnModelAccess);
        EMFObjectIndividual communicationPath with EMFObjectRole(container=deployementModelAccess);

        create::_create(required String messageName, required String comPathName) {
            messageFlow = select unique BPMNMessageFlow from bpmnModelAccess where (selected.name == parameters.messageName);
            communicationPath = select unique DeploymentCommunicationPath from deployementModelAccess where (selected.name == parameters.comPathName);
        }

        public flightPlanSecurityRule1() {
            boolean checkAnnotation = false;
            container.annotationsCommPath = container.getAnnotationsCommunicationPath(communicationPath);
            container.annotationsObject = container.getAnnotationsObjects(messageFlow);
            checkAnnotation = container.verifySecurityAnnotation(container.annotationsCommPath, container.annotationsObject);

            if (checkAnnotation) {
                log "[ATM - SecurityRule 1] -> Security rule verified";
            } else {
                log "[ATM - SecurityRule 1] -> Security rule violated";
            }
        }
    }

    public concept DataObjectClass extends Correspondences {
        EMFObjectIndividual dataObject with EMFObjectRole(container=bpmnModelAccess);
        EMFObjectIndividual class with EMFObjectRole(container=dataModelAccess);

        create(required String nameDataObject, required String nameClass) {
            dataObject = select unique BPMNDataObject from bpmnModelAccess where (selected.name == parameters.nameDataObject);
            class = select unique UMLClass from dataModelAccess where (selected.name == parameters.nameClass);
        }

        public flightPlanSecurityRule2() {
            boolean checkAnnotation = false;
            container.annotationsObject = container.getAnnotationsObjects(dataObject);
            container.annotationsClass = container.getAnnotationClass(class);
            checkAnnotation = container.verifySecurityAnnotationDataClass(container.annotationsClass, container.annotationsObject);

            if (checkAnnotation) {
                log "[ATM - SecurityRule 2] -> Security rule verified";
            } else {
                log "[ATM - SecurityRule 2] -> Security rule violated";
            }
        }
    }

    public concept PoolClass extends Correspondences {
        EMFObjectIndividual pool with EMFObjectRole(container=bpmnModelAccess);
        EMFObjectIndividual class with EMFObjectRole(container=dataModelAccess);

        create(required String namePool, required String nameClass) {
            pool = select unique BPMNParticipant from bpmnModelAccess where (selected.name == parameters.namePool);
            class = select unique UMLClass from dataModelAccess where (selected.name == parameters.nameClass);
        }

        public flightPlanSecurityRule3() {
           boolean checkPool= container.verifyPoolIncludeConfidentialData(pool); 
		   bolean ckeckClass = container.checkClassSecurityAnnotation(class);

			if(checkPool && ckeckClass) {
				log "[ATM - SecurityRule 3] -> Security rule verified";
            } else {
                log "[ATM - SecurityRule 3] -> Security rule violated";

			}

        }
    }

    public concept ModelsCorrespondence extends Correspondences {
        DeploymentModel deploymentModel with EMFObjectRole(container=deployementModelAccess, type=DEPLOYMENT_DEPLOYEMENT_MODEL);
        DataModel dataModel with EMFObjectRole(container=dataModelAccess, type=DATA_MODEL);

        create::_create(required String deployementModelName, required String dataModelName) {
            deploymentModel = select unique DeploymentModel from deployementModelAccess where (selected.nameModel == parameters.deployementModelName);
            dataModel = select unique DataModel from dataModelAccess where (selected.name == parameters.dataModelName);
        }

        // --- ATM security Rule 4 ---
        /* when Deployment model annotated with “secure dependency”. The data model must contain at least one Class annotated “Critical”. */
        public void atmSecurityRule4() {
            boolean checkAnnotation = container.container.checkSecurityAnnotationModels(deployementModel);
            if (checkAnnotation) {
                log "[ATM - SecurityRule 4] -> Security rule verified";
            } else {
                log "[ATM - SecurityRule 4] -> Security rule violated";
            }
        }

        // --- ATM security Rule 5 ---
        /* when Data model annotated with annotated “secure Link”. The deployment model must contain at least one association annotated “Integrity” or ”Secrecy” */
        public void atmSecurityRule5() {
            boolean checkAnnotation = container.checkSecurityAnnotationModel(dataModel);
            boolean checkAssociationAnnotation = container.checkAssociationAnnotation();

            log checkAnnotation.toString;
            if (checkAnnotation && checkAssociationAnnotation) {
                log "[ATM - SecurityRule 5] -> Security rule verified";
            } else {
                log "[ATM - SecurityRule 5] -> Security rule violated";
            }
        }

        delete() {
            delete deploymentModel;
            delete dataModel;
        }
    }
}