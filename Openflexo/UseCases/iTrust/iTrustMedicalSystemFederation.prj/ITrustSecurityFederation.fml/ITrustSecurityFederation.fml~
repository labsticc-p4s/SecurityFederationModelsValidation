namespace "http://www.openflexo.org/projects/2024/1/ITrustMedicalSystem_1705498447306.prj" as ITRUSTMEDICALSYSTEM_1705498447306PRJ;
namespace "http://www.openflexo.org/projects/2024/1/ITrustMedicalSystemFederation_1705933420738.prj" as ITRUSTMEDICALSYSTEMFEDERATION_1705933420738PRJ;

use org.openflexo.technologyadapter.emf.EMFModelSlot as EMF;
use org.openflexo.foundation.fml.rt.FMLRTVirtualModelInstanceModelSlot as FMLRT;

import org.openflexo.technologyadapter.emf.model.EMFModel;
import org.openflexo.technologyadapter.emf.model.EMFObjectIndividual;
import java.lang.String;
import org.openflexo.foundation.ontology.IFlexoOntologyPropertyValue;
import java.util.List;

import ["http://www.omg.org/spec/BPMN/20100524/MODEL-XMI"] as BPMN21;

import ["http://www.example.org/deployementEcoreMetaModel"] as DEPLOYEMENT_ECORE_META_MODEL;
import ["http://www.eclipse.org/uml2/5.0.0/UML"] as UML2;

import [BPMN21:"Participant"] as BPMN_PARTICIPANT;
import [DEPLOYEMENT_ECORE_META_MODEL:"Artifact"] as DEPLOYMENT_ARTIFACT;
import [BPMN21:"MessageFlow"] as BPMN_MESSAGE_FLOW;
import [BPMN21:"TextAnnotation"] as BPMN_TEXT_ANNOTATION;
import [BPMN21:"Association"] as BPMN_ASSOCIATION;
import [BPMN21:"Process"] as BPMN_PROCESS;
import [BPMN21:"DataObject"] as BPMN_DATAOBJECT;
import [BPMN21:"FlowElement"] as BPMN_FLOW_ELEMENTS;
import [BPMN21:"Task"] as BPMN_TASK;
import [BPMN21:"UserTask"] as BPMN_USER_TASK;
import [BPMN21:"SequenceFlow"] as BPMN_SEQUENCE_FLOW;
import [DEPLOYEMENT_ECORE_META_MODEL:"Deploy"] as DEPLOYMENT_DEPLOY;
import [DEPLOYEMENT_ECORE_META_MODEL:"Association"] as DEPLOYMENT_ASSOCIATION;
import [DEPLOYEMENT_ECORE_META_MODEL:"CommunicationPath"] as DEPLOYMENT_COMMUNICATION_PATH;
import [DEPLOYEMENT_ECORE_META_MODEL:"DeployementModel"] as DEPLOYMENT_DEPLOYEMENT_MODEL;
import ["http://www.eclipse.org/uml2/5.0.0/UML"] as UML22;
import [UML2:"Class"] as DATA_CLASS;
import [UML2:"Element"] as DATA_ELEMENT;
import [UML2:"Operation"] as DATA_OPERATION;
import [UML2:"Stereotype"] as DATA_STEREOTYPE;
import [UML2:"Comment"] as DATA_COMMENT;
import [UML2:"ElementImport"] as DATA_ELEMENT_IMPORT;
import [UML2:"Model"] as DATA_MODEL;
import [UML2:"AssociationClass"] as DATA_ASSOCIATION_CLASS;
import ["AccessControlMetamodel"] as ACCESS_CONTROL_METAMODEL2;
import [ACCESS_CONTROL_METAMODEL2:"ROLE"] as ACCESS_CONTROL_ROLE;
import [ACCESS_CONTROL_METAMODEL2:"Authorization"] as ACCESS_CONTROL_AUTHORIZATION;
import [ITRUSTMEDICALSYSTEMFEDERATION_1705933420738PRJ + "/ITrustSecurityFederation.fml"] as ITrustSecurityFederation;

typedef EMFObjectIndividualType(eClass=BPMN_PARTICIPANT) as BPMNParticipant;
typedef EMFObjectIndividualType(eClass=DEPLOYMENT_ARTIFACT) as DeploymentArtifact;
typedef EMFObjectIndividualType(eClass=DEPLOYMENT_COMMUNICATION_PATH) as DeploymentCommunicationPath;
typedef EMFObjectIndividualType(eClass=BPMN_MESSAGE_FLOW) as BPMNMessageFlow;
typedef EMFObjectIndividualType(eClass=DATA_CLASS) as DataClass;
typedef EMFObjectIndividualType(eClass=ACCESS_CONTROL_ROLE) as AccessControlRole;
typedef EMFObjectIndividualType(eClass=DATA_ELEMENT) as DataElement;
typedef EMFObjectIndividualType(eClass=BPMN_DATAOBJECT) as BPMNDataObject;
typedef EMFObjectIndividualType(eClass=BPMN_ASSOCIATION) as BPMNAssociation;
typedef EMFObjectIndividualType(eClass=BPMN_FLOW_ELEMENTS) as BPMNFlowElements;
typedef EMFObjectIndividualType(eClass=BPMN_TEXT_ANNOTATION) as BPMNTextAnnotation;
typedef EMFObjectIndividualType(eClass=DEPLOYMENT_ASSOCIATION) as DeploymentAssociation;
typedef EMFObjectIndividualType(eClass=DEPLOYMENT_DEPLOY) as DeploymentDeploy;
typedef EMFObjectIndividualType(eClass=BPMN_TASK) as BPMNTask;
typedef EMFObjectIndividualType(eClass=BPMN_USER_TASK) as BPMNUserTask;
typedef EMFObjectIndividualType(eClass=DATA_OPERATION) as DataOperation;
typedef EMFObjectIndividualType(eClass=ACCESS_CONTROL_AUTHORIZATION) as AccessAuthorization;
typedef EMFObjectIndividualType(eClass=DATA_STEREOTYPE) as DataStereotype;
typedef EMFObjectIndividualType(eClass=DATA_COMMENT) as DataComment;
typedef EMFObjectIndividualType(eClass=DATA_ELEMENT_IMPORT) as DataElementImport;
typedef EMFObjectIndividualType(eClass=BPMN_SEQUENCE_FLOW) as BPMNSequenceFlow;
typedef EMFObjectIndividualType(eClass=DATA_MODEL) as DataModel;
typedef EMFObjectIndividualType(eClass=DEPLOYMENT_DEPLOYEMENT_MODEL) as DeploymentModel;
typedef EMFObjectIndividualType(eClass= DATA_ASSOCIATION_CLASS) as DataAssociationClass;

@URI("http://www.openflexo.org/projects/2024/1/ITrustMedicalSystemFederation_1705933420738.prj/ITrustSecurityFederation.fml")
@Author("chahr")
public model ITrustSecurityFederation {
	EMFModel bpmnModelAccess with EMFModelSlot(metaModel=BPMN21,isRequired=true);
	EMFModel deploymentModelAccess with EMFModelSlot(metaModel=DEPLOYEMENT_ECORE_META_MODEL,isRequired=true);
	EMFModel accessControlModelAccess with EMFModelSlot(metaModel=ACCESS_CONTROL_METAMODEL2,isRequired=true);
	EMFModel dataModelAccess with EMFModelSlot(metaModel=UML2,isRequired=true);
	MessageFlowCommunicationPathCorrespondence[0,*] listInstancesMessageComm with ConceptInstance(virtualModelInstance=this);
	PoolArtifactCorrespondence[0,*] listInstancesPoolArtifact with ConceptInstance(virtualModelInstance=this);
   ClassArtifactCorrespondence[0,*] listInstancesClassArtifact with ConceptInstance(virtualModelInstance=this);
	UserRoleCorrespondence[0,*] listUserRoleLink with ConceptInstance(virtualModelInstance=this);

	public create::createAccessObject(required Resource<EMFModel> bpmnModelResource, required Resource<EMFModel> deploymentModelResource, required Resource<EMFModel> dataModelResource, required Resource<EMFModel> accessControlModelResource) {
		bpmnModelAccess = parameters.bpmnModelResource.resourceData;
		deploymentModelAccess = parameters.deploymentModelResource.resourceData;
		dataModelAccess = parameters.dataModelResource.resourceData;
		accessControlModelAccess = parameters.accessControlModelResource.resourceData;
	}

   // Join all the instances of the concept MessageFlowCommunicationPath
	private void joinInstanceMessageFlowCommnicationPath() {
		for (MessageFlowCommunicationPathCorrespondence item : select MessageFlowCommunicationPathCorrespondence from this) {
			if (!listInstancesMessageComm.contains(item)) {
				listInstancesMessageComm.add(item);
			}
		}
	}

	// Verify whether an artifact is a part of the PoolArtifactCorrespondence intance and return the artifact 
	private List<DeploymentArtifact> verifyExistenceCorresp(List<String> artifacts) {
		List<DeploymentArtifact> listArtifact = new ArrayList<DeploymentArtifact>();
		for (PoolArtifactCorrespondence item : select PoolArtifactCorrespondence from this) {
			if (parameters.artifacts.contains(item.artifact.name.toString)) {
				listArtifact.add(item.artifact);
			}
		}
		return listArtifact;
	}

	//  Retrieve the list of Pools related to an Artifact selected
	private BPMNParticipant getPool(DeploymentArtifact artifact) {
		BPMNParticipant associatedPool;
		for (PoolArtifactCorrespondence item : select PoolArtifactCorrespondence from this) {
			if (item.artifact == parameters.artifact) {
				associatedPool = item.pool;
			}
		}
		return associatedPool;
	}
   private DeploymentArtifact getArtifact( BPMNParticipant pool) {
      DeploymentArtifact associatedArtifact;
      for (PoolArtifactCorrespondence item : select PoolArtifactCorrespondence from this) {
         if (item.pool == parameters.pool) {
            associatedArtifact = item.artifact;
         }
      }
      return associatedArtifact;
   }

   private DataClass getAssociatedClass (BPMNParticipant pool) {
      DataClass associatedClass;
       for (PoolClassCorrespondence item : select PoolClassCorrespondence from this) {
         if (item.pool == parameters.pool) {
            associatedClass = item.class;
         }
      }
      return associatedClass;
   }

	delete() {
	}

	//  Check if the user has a valid role
	private boolean checkUserRole(required String userName) {
		boolean checked = false;
		for (UserRoleCorrespondence item : select UserRoleCorrespondence from this) {
			if (item.user.name == parameters.userName && item.verifyCorrespondence()) {
				checked = true;
			}
		}
		return checked;
	}

   private DeploymentArtifact getArtifact(String element) {
      for (ClassArtifactCorrespondence item : select ClassArtifactCorrespondence from this) {
         if (item.class.name == parameters.element) {
           return item.artifact; 
         }
      }
   }

	// Check the security annotations of the flowelements
	private boolean checkDataObjectAnnotations(BPMNFlowElements flowElements) {
		for (BPMNAssociation itemAsso : select BPMNAssociation from bpmnModelAccess) {
			for (BPMNTextAnnotation itemAnnota : select BPMNTextAnnotation from bpmnModelAccess) {
				if (parameters.flowElements == itemAsso.sourceRef && itemAnnota == itemAsso.targetRef) {
					if (itemAnnota.text.contains("IntegrityDo") || itemAnnota.text.contains("ConfidentialityDo") || itemAnnota.text.contains("PrivacyDo")) {
						return true;
					}
					else {
						return false;
					}
				}
			}
		}
	}

	// Get the FlowElements of a selected Pool
	private List<BPMNFlowElements> getFlowElementsOfPool(BPMNParticipant pool) {
		List<BPMNFlowElements> listFlowElements = new ArrayList<BPMNFlowElements>();
		for (BPMNParticipant itemParticipant : select BPMNParticipant from bpmnModelAccess) {
			if (itemParticipant == parameters.pool) {
				for (BPMNFlowElements itemFlows : select BPMNFlowElements from bpmnModelAccess) {
					if (itemParticipant.processRef.flowElements.contains(itemFlows) && itemFlows instanceof BPMNDataObject) {
						listFlowElements.add(itemFlows);
					}
				}
			}
		}
		return listFlowElements;
	}

	private List<BPMNFlowElements> getFlowElementOfPool(BPMNParticipant pool) {
		List<BPMNFlowElements> listFlowElements = new ArrayList<BPMNFlowElements>();
		for (BPMNParticipant itemParticipant : select BPMNParticipant from bpmnModelAccess) {
			if (itemParticipant == parameters.pool) {
				for (BPMNFlowElements itemFlows : select BPMNFlowElements from bpmnModelAccess) {
					if (itemParticipant.processRef.flowElements.contains(itemFlows)) {
						listFlowElements.add(itemFlows);
					}
				}
			}
		}
		return listFlowElements;
	}

	// Verify the security annotations of a DataObject included in the FlowElements 
	private boolean verifyDataObjectAnnotation(List<BPMNFlowElements> listFlowElements) {
		for (BPMNFlowElements itemFlowElements : parameters.listFlowElements) {
			for (BPMNAssociation itemAsso : select BPMNAssociation from bpmnModelAccess) {
				for (BPMNTextAnnotation itemAnnota : select BPMNTextAnnotation from bpmnModelAccess) {
					if (itemFlowElements == itemAsso.sourceRef && itemAnnota == itemAsso.targetRef) {
						if (itemAnnota.text.contains("IntegrityDo") || itemAnnota.text.contains("ConfidentialityDo") || itemAnnota.text.contains("PrivacyDo")) {
							return true;
						}
					}
				}
			}
		}
		return false;
	}

   // Verify the security annotations of a MessageFlow 
   private boolean checkMessageFlowAnnotation(BPMNMessageFlow messageFlow) {
         for (BPMNAssociation itemAssociation : select BPMNAssociation from bpmnModelAccess) {
            for (BPMNTextAnnotation itemAnnotation : select BPMNTextAnnotation from bpmnModelAccess) {
               if (parameters.messageFlow == itemAssociation.targetRef && itemAnnotation == itemAssociation.sourceRef) {
                  if (itemAnnotation.text.contains("IntegrityMF") || itemAnnotation.text.contains("ConfidentialityMF") || itemAnnotation.text.contains("NonRepudMF")) {
                     return true;
                  }
               }
            }
         }
      return false;
   }

	// Verify if an artifact has association with other artifacts in the Deployment model
	private List<String> verifyExistenceArtifactAssociated(DeploymentArtifact artifact) {
		boolean existe = false;
		List<String> listAssoArtifact = new ArrayList<String>();
		for (DeploymentAssociation itemAsso : select DeploymentAssociation from deploymentModelAccess) {
			for (Object itemArtifact : itemAsso.getValues("artifact")) {
				if (itemArtifact == parameters.artifact) {
					existe = true;
				}
				else {
					existe = false;
				}
			}
			if (existe) {
				for (Object itemArtifact : itemAsso.getValues("artifact")) {
					if (!(itemArtifact == parameters.artifact)) {
						listAssoArtifact.add(itemArtifact.toString.substring(9).toString);
					}
				}
			}
		}
		return listAssoArtifact;
	}

	// Get the device where an artifact is deployed
	private List<EMFObjectIndividual> getDeploymentArtifact(DeploymentArtifact artifact) {
		List<EMFObjectIndividual> devicesArtifact = new ArrayList<EMFObjectIndividual>();
		for (DeploymentDeploy itemDeploy : select DeploymentDeploy from deploymentModelAccess) {
			if (itemDeploy.artifact == parameters.artifact) {
				if (itemDeploy.device != null) {
					devicesArtifact.add(itemDeploy.device);
				}
				else {
					if (itemDeploy.node != null) {
						devicesArtifact.add(itemDeploy.node);
					}
				}
			}
		}
		return devicesArtifact;
	}

	// Get communicationPath for a selected device
	private List<DeploymentCommunicationPath> getCommunicationPath(List<EMFObjectIndividual> devices) {
		List<DeploymentCommunicationPath> commPath = new ArrayList<DeploymentCommunicationPath>();
		for (DeploymentCommunicationPath commPath1 : select DeploymentCommunicationPath from deploymentModelAccess) {
			if (parameters.devices.contains(commPath1.device)) {
				commPath.add(commPath1);
			}
		}
		return commPath;
	}

	// verify if the artifact and the associated artifacts are deployed in the same devices
	private boolean verifyDeploy(List<EMFObjectIndividual> deviceArtifact, List<EMFObjectIndividual> devicesAssoArtifact) {
		for (EMFObjectIndividual device : parameters.deviceArtifact) {
			if (!parameters.devicesAssoArtifact.contains(device)) {
				return false;
			}
		}
		return true;
	}

	// Get MessageFlow for a selected Pool
	private List<BPMNMessageFlow> getMessageFlows(EMFObjectIndividual pool) {
		List<BPMNMessageFlow> messageFlows = new ArrayList<BPMNMessageFlow>();
		for (BPMNParticipant parti : select BPMNParticipant from bpmnModelAccess) {
			if (parti.id.toString == parameters.pool.name.toString) {
				int n = parti.processRef.flowElements.size();
				for (BPMNMessageFlow dataflow : select BPMNMessageFlow from bpmnModelAccess) {
					for (int j=0 ; j < n ; j++) {
						if (dataflow.sourceRef.toString == parti.processRef.flowElements.get(j).toString) {
							messageFlows.add(dataflow);
						}
						if (dataflow.targetRef.toString == parti.processRef.flowElements.get(j).toString) {
							messageFlows.add(dataflow);
						}
					}
				}
			}
		}
		return messageFlows;
	} 

   private BPMNParticipant getAssociatedPool(BPMNMessageFlow messageFlow, BPMNParticipant pool ) {
      List<BPMNFlowElements> listFlowElements = new ArrayList<BPMNFlowElements>();
      List<BPMNMessageFlow> messageFlows = new ArrayList<BPMNMessageFlow>();
      for (BPMNParticipant participant : select BPMNParticipant from bpmnModelAccess) {
         if (participant != parameters.pool) {
            messageFlows = this.getMessageFlows(participant);
            if (messageFlows.contains(parameters.messageFlow)) {
               return participant;
            }
            
         }
      }
   }

   private BPMNParticipant getTaskPoolContainer(BPMNUserTask task) {
      List<BPMNFlowElements> listFlowElements = new ArrayList<BPMNFlowElements>();
      for (BPMNParticipant participant : select BPMNParticipant from bpmnModelAccess) {
        listFlowElements = this.getFlowElementOfPool(participant);
        if (listFlowElements.contains(parameters.task)) {
          return participant;
        }
      }
   }

 


	// Get MessageFlows shared between two Pools
	private List<BPMNMessageFlow> getSharedMessageFlows(List<BPMNMessageFlow> messageFlowsPool, List<BPMNMessageFlow> messageFlowsAssociatedPool) {
		List<BPMNMessageFlow> sharedMessageFlows = new ArrayList<BPMNMessageFlow>();
		for (BPMNMessageFlow messageflow : parameters.messageFlowsAssociatedPool) {
			if (parameters.messageFlowsPool.contains(messageflow)) {
				sharedMessageFlows.add(messageflow);
			}
		}
		return sharedMessageFlows;
	}
 
  private List<BPMNMessageFlow> getMessageFlowsWithFilter(List<BPMNMessageFlow> messageFlowsPool) {
      List<BPMNMessageFlow> messageFlowsFilter = new ArrayList<BPMNMessageFlow>();
      for (BPMNMessageFlow itemMessageFlow : parameters.messageFlowsPool) {
         for (BPMNAssociation itemAssociation : select BPMNAssociation from bpmnModelAccess) {
            if (itemAssociation.targetRef == itemMessageFlow && this.checkMessageFlowAnnotation(itemMessageFlow)) {
               messageFlowsFilter.add(itemMessageFlow);    
            }
         }
      }

      
     return messageFlowsFilter;
  }
  
   // verify the security annotation on the association 
	private boolean checkSecurityAnnotaionsOnAssociation(DeploymentArtifact artifact) {
		boolean check = false;
		for (DeploymentAssociation association : select DeploymentAssociation from deploymentModelAccess) {
			if (association.getValues("artifact").toString.contains(parameters.artifact.nameArtifact)) {
				if (association.getValues("secrecy") != null || association.getValues("integrity") != null) {
					check = true;
				}
			}
		}
		return check;
	}

  // Get associated Class
  private List<String> getAssociatedClass(DataClass class) {
   List<String> associatedClass = new ArrayList<String>();
   for (DataAssociationClass association : select DataAssociationClass from dataModelAccess) {
      if (association.getValues("redefinedClassifier").toString.contains(parameters.class.name) && (association.getValues("ownedElement").toString.contains("Integrity") || association.getValues("ownedElement").toString.contains("Secrecy"))) {
         for (Object itemClass : association.getValues("redefinedClassifier")) {
            if (itemClass != parameters.class) {
               associatedClass.add(itemClass.toString.substring(6));  
            }
         }
      }
   }

   return associatedClass;
  }

   // Verify wether the association contains a loggedIn annotation
	private boolean checkLogInAnnotaionsOnAssociation(DeploymentArtifact artifact) {
		boolean check = false;
		for (DeploymentAssociation association : select DeploymentAssociation from deploymentModelAccess) {
			if (association.getValues("artifact").toString.contains(parameters.artifact.nameArtifact)) {
				if (association.getValues("loggedIn") != null) {
					check = true;
				}
			}
		}
		return check;
	}

   // Verify the security annotation on the communication Path
	private boolean ckeckSecurityAnnotationOnCommunicationPath(DeploymentArtifact artifact) {
		boolean check = false;
		for (DeploymentDeploy deploy : select DeploymentDeploy from deploymentModelAccess) {
			if (deploy.getValues("artifact").toString.contains(parameters.artifact.nameArtifact)) {
				for (DeploymentCommunicationPath path : select DeploymentCommunicationPath from deploymentModelAccess) {
					if (path.getValues("node").toString.contains(deploy.node.nameNode) && path.getValues("encrypted") != null) {
						check = true;
					}
				}
			}
		}
		return check;
	}

   // Verify the security annotation on the Task
	private boolean checkSecurityAnnotationTask(List<BPMNFlowElements> listFlowElements) {
		for (BPMNFlowElements itemFlowElements : parameters.listFlowElements) {
			for (BPMNAssociation itemAsso : select BPMNAssociation from bpmnModelAccess) {
				for (BPMNTextAnnotation itemAnnota : select BPMNTextAnnotation from bpmnModelAccess) {
					if (itemFlowElements == itemAsso.targetRef && itemAnnota == itemAsso.sourceRef) {
						if (itemAnnota.text.contains("IntegrityAct")) {
							return true;
						}
					}
				}
			}
		}
		return false;
	}

   // Verify the security annotation on the Task
 private boolean checkSecurityAnnotationTask(BPMNUserTask task) {
         for (BPMNAssociation itemAssociation : select BPMNAssociation from bpmnModelAccess) {
            for (BPMNTextAnnotation itemAnnotation : select BPMNTextAnnotation from bpmnModelAccess) {
               if (itemAnnotation == itemAssociation.sourceRef && itemAssociation.targetRef == parameters.task) {
                  if (itemAnnotation.text.contains("IntegrityAct")) {
                     return true;
                  }
               }
         }
      }
      return false;
   }

   // verify wether a selected Task in the BPMN model is a logIn Task
	private boolean checkLogInTask(BPMNFlowElements task) {
		for (BPMNSequenceFlow itemSequenceFlow : select BPMNSequenceFlow from bpmnModelAccess) {
			if (itemSequenceFlow.targetRef == parameters.task) {
				if (itemSequenceFlow.sourceRef instanceof BPMNTask && itemSequenceFlow.sourceRef.name == "LogIn") {
					return true;
				}
			}
		}
		return false;
	}

	private boolean checkTaskPrecedence(List<BPMNFlowElements> listFlowElements) {
		for (BPMNFlowElements itemFlowElements : parameters.listFlowElements) {
			if (itemFlowElements instanceof BPMNUserTask || itemFlowElements instanceof BPMNTask) {
				for (BPMNAssociation itemAsso : select BPMNAssociation from bpmnModelAccess) {
					for (BPMNTextAnnotation itemAnnota : select BPMNTextAnnotation from bpmnModelAccess) {
						if (itemFlowElements == itemAsso.targetRef && itemAnnota == itemAsso.sourceRef) {
							if (itemAnnota.text.contains("IntegrityAct") && this.checkLogInTask(itemFlowElements)) {
								return true;
							}
						}
					}
				}
			}
		}
		return false;
	}

	private boolean checkSecurityAnnotationModels(DeploymentModel deploymentModel) {
		if (parameters.deploymentModel.getValues("securityproperties").toString.contains("secureDependency")) {
			for (DataClass itemClass : select DataClass from dataModelAccess) {
				if (itemClass.getValues("ownedElement").toString.contains("Critical")) {
					return true;
				}
			}
		}
		return false;
	}

   private boolean checkSecurityAnnotationModel(DataModel dataModel) {
      if (parameters.dataModel.getValues("ownedStereotype").toString.contains("SecureLink")) {
         return true;
      }
      return false;
   }

   private AccessControlRole getRoleAuthorizationContainer(AccessAuthorization authorization) {
      for (AccessControlRole role : select AccessControlRole from accessControlModelAccess) {
         if (role.getValues("authorization").contains(parameters.authorization)) {
             return role;
         }
      } 
   }

   // Verify the security annotation on the association relating two selected artifects
   private boolean checkSecurityAnnotaionsOnAssociation(DeploymentArtifact artifact, DeploymentArtifact artifact1 ) {
      for (DeploymentAssociation association : select DeploymentAssociation from deploymentModelAccess) {
         if (association.getValues("artifact").toString.contains(parameters.artifact.nameArtifact) && association.getValues("artifact").toString.contains(parameters.artifact1.nameArtifact)) {
            if (association.getValues("secrecy") != null || association.getValues("integrity") != null) {
               return true;
            }
         }
      }
      
     return false;  
   }

    // Verify the security annotation on the association relating two selected artifects
   private boolean checkSecurityAnnotaionsOnAssociation(DataClass class, DataClass class1 ) {
       for (DataAssociationClass association : select DataAssociationClass from dataModelAccess) {
         if (association.getValues("redefinedClassifier").toString.contains(parameters.class.name) && association.getValues("redefinedClassifier").toString.contains(parameters.class1.name) && (association.getValues("ownedElement").toString.contains("Integrity") || association.getValues("ownedElement").toString.contains("Secrecy"))) {
            return true;
         }
       }
      return false;
   }

  private boolean checkAssociationAnnotation() {
      for (DeploymentAssociation association : select DeploymentAssociation from deploymentModelAccess) {
        if (association.getValues("secrecy") != null || association.getValues("integrity") != null) {
          return true;
        } 
      }
   return false;
  }

	public concept Correspondences {
		// The correspondence between a Pool in the BPMN model and an artifact in the Deployment model
		public concept PoolArtifactCorrespondence extends Correspondences {
			BPMNParticipant pool with EMFObjectRole(container=bpmnModelAccess,type=BPMN_PARTICIPANT);
			DeploymentArtifact artifact with EMFObjectRole(container=deploymentModelAccess,type=DEPLOYMENT_ARTIFACT);
			MessageFlowCommunicationPathCorrespondence[0,*] listInstancesMessageComm with ConceptInstance(virtualModelInstance=container.container);

			// create the instance of the concept with the selected pool and artifact
			create::_create(required String name) {
				pool = select unique BPMNParticipant from bpmnModelAccess where (selected.name == parameters.name);
				artifact = select unique DeploymentArtifact from deploymentModelAccess where (selected.name == parameters.name);
			}
			delete() {
				delete pool;
				delete artifact;
			}

			// --- iTrust security Rule1 --- 
			/*  this security verify when two Pools in the BPMN model (that correspond to artifacts in the deployment model), communicate security-critical data and
			are deployed in different devices, the communication between the two devices must occur through an encrypted channel. This rule is added to the
			concept PoolArtifactCorrespondence  */

			public void iTrustSecurityRule1() {
				boolean checkConfidentialData = false;
				List<BPMNFlowElements> flowElts = new ArrayList<BPMNFlowElements>();

				// Get instance of the Concept MessageFlowCommunicatioPath
				container.container.joinInstanceMessageFlowCommnicationPath();
				listInstancesMessageComm = container.container.listInstancesMessageComm;
				flowElts = container.container.getFlowElementsOfPool(pool);
				checkConfidentialData = container.container.verifyDataObjectAnnotation(flowElts);
				if (checkConfidentialData == true && !this.verifyExistenceConsistentInstance()) {
					log "[iTrust - SecurityRule 1] -> Security rule violated";
				}
				else {
					log "[iTrust - SecurityRule 1] -> Security rule not violated";
				}
			}
			private boolean verifyExistenceConsistentInstance() {
				List<EMFObjectIndividual> assoPool;
				List<EMFObjectIndividual> commPath;
				List<DeploymentArtifact> assoArtifactsFilter = new ArrayList<DeploymentArtifact>();
				List<String> assoArtifacts = new ArrayList<String>();
				List<EMFObjectIndividual> devices = new ArrayList<EMFObjectIndividual>();
				List<EMFObjectIndividual> devicesArtifactsFilter = new ArrayList<EMFObjectIndividual>();
				List<DeploymentCommunicationPath> commPath = new ArrayList<DeploymentCommunicationPath>();
				List<BPMNMessageFlow> messageFlowsPool = new ArrayList<BPMNMessageFlow>();
				List<BPMNMessageFlow> messageFlowsAssociatedPool = new ArrayList<BPMNMessageFlow>();
				List<BPMNMessageFlow> sharedMessageFlows = new ArrayList<BPMNMessageFlow>();
				BPMNParticipant associatedPool;
				assoArtifacts = container.container.verifyExistenceArtifactAssociated(artifact);
				assoArtifactsFilter = container.container.verifyExistenceCorresp(assoArtifacts);
				devices = container.container.getDeploymentArtifact(artifact);
				commPath = container.container.getCommunicationPath(devices);
				for (DeploymentArtifact assoArtifactFilt : assoArtifactsFilter) {
					associatedPool = container.container.getPool(assoArtifactFilt);
					devicesArtifactsFilter = container.container.getDeploymentArtifact(assoArtifactFilt);
					if (!container.container.verifyDeploy(devices,devicesArtifactsFilter)) {
						messageFlowsPool = container.container.getMessageFlows(pool);
						messageFlowsAssociatedPool = container.container.getMessageFlows(associatedPool);
						sharedMessageFlows = container.container.getSharedMessageFlows(messageFlowsPool,messageFlowsAssociatedPool);
						for (BPMNMessageFlow dataflow : sharedMessageFlows) {
							for (MessageFlowCommunicationPathCorrespondence item : container.container.listInstancesMessageComm) {
								// Verify the security rule 2
								if (dataflow == item.messageFlow && commPath.contains(item.communicationPath)) {
									if (!item.verifySecureCommunication()) {
										return false;
									}
								}
							}
						}
					}
				}
				return true;
			}

			// --- iTrust security Rule3 ---

   			/*  when the Pool in the BPMN model (that corresponds to artifact in the deployment model deployed in a device), 
            contains a DataObject that is associate to a ConfidentialityDO, IntegrityDo or PrivacyDO annotations. 
            The dependency between the corresponding Artifact and other Artifact must be annotated with Integrity or secrecy  */

			public void iTrustSecurityRule3() {
				List<BPMNFlowElements> listFlowElements = new ArrayList<BPMNFlowElements>();
				listFlowElements = container.container.getFlowElementsOfPool(pool);
				boolean checkCofidentialDataObject = container.container.verifyDataObjectAnnotation(listFlowElements);
				boolean checkAssociationAnnotation = container.container.checkSecurityAnnotaionsOnAssociation(artifact);
				if (checkCofidentialDataObject && checkAssociationAnnotation) {
					log "[iTrust - SecurityRule 3] -> Security rule verified";
				}
				else {
					log "[iTrust - SecurityRule 3] -> Security rule violated";
				}
			}

			// --- iTrust security Rule8 ---
			/*  when the Pool in the BPMN model (that corresponds to artifact in the deployment model), 
			contains a Task annotated with IntegrityAct and preceded with log in task .
			The dependency between the corresponding Artifact and other Artifact must be annotated with login  */

			public void iTrustSecurityRule8() {
				List<BPMNFlowElements> listFlowElements = new ArrayList<BPMNFlowElements>();
				listFlowElements = container.container.getFlowElementOfPool(pool);
				boolean checkTaskAnnotation = container.container.checkSecurityAnnotationTask(listFlowElements);
				boolean checkAssociationAnnotation = container.container.checkSecurityAnnotaionsOnAssociation(artifact);
				if (checkTaskAnnotation && checkAssociationAnnotation) {
					log "[iTrust - SecurityRule 8] -> Security rule verified";
				}
				else {
					log "[iTrust - SecurityRule 8] -> Security rule violated";
				}
			}

			// --- iTrust security Rule9 ---
			/*  when the Pool in the BPMN model (that corresponds to artifact in the deployment model), 
			contains a Task annotated with IntegrityAct .The dependency between the corresponding Artifact and other Artifact must be  with Integrity or secrecy  */

			public void iTrustSecurityRule9() {
				List<BPMNFlowElements> listFlowElements = new ArrayList<BPMNFlowElements>();
				listFlowElements = container.container.getFlowElementOfPool(pool);
				boolean checkTaskAnnotation = container.container.checkSecurityAnnotationTask(listFlowElements);
				boolean checkTaskPrecedence = container.container.checkTaskPrecedence(listFlowElements);
				boolean checklogin = container.container.checkLogInAnnotaionsOnAssociation(artifact);
				if (checkTaskAnnotation && checkTaskPrecedence && checklogin) {
					log "[iTrust - SecurityRule 9] -> Security rule verified";
				}
				else {
					log "[iTrust - SecurityRule 9] -> Security rule violated";
				}
			}
   
           // --- iTrust security Rule14 --- 
           /*  when two Pools in the BPMN model (that correspond to artifacts in the deployment model), Communicate with each other via MessageFlow that is linked to 
          IntegrityMF, ConfidentialityMF or NonRepuMF.The dependency between the corresponding Artifact and other Artifact must be  with Integrity or secrecy  */
          
        public void iTrustSecurityRule14() {
            List<BPMNMessageFlow> messageFlowsPool = new ArrayList<BPMNMessageFlow>();
            messageFlowsPool = container.container.getMessageFlows(pool);
            List<BPMNMessageFlow> messageFlowsPoolWithFilter = new ArrayList<BPMNMessageFlow>();
            messageFlowsPoolWithFilter = container.container.getMessageFlowsWithFilter(messageFlowsPool); 
            for (BPMNMessageFlow itemMessageFlow : messageFlowsPoolWithFilter ) {
              BPMNParticipant associatedPool = container.container.getAssociatedPool(itemMessageFlow,pool); 
              DeploymentArtifact associatedArtifact = container.container.getArtifact(associatedPool);
              boolean checkAssociationAnnotation = container.container.checkSecurityAnnotaionsOnAssociation(artifact,associatedArtifact);
              if (checkAssociationAnnotation) {
                log "[iTrust - SecurityRule 14] -> Security rule verified";
               }
               else {
                  log "[iTrust - SecurityRule 14] -> Security rule violated";
               }
            }
           }
		}
		public concept MessageFlowCommunicationPathCorrespondence extends Correspondences {
			BPMNMessageFlow messageFlow with EMFObjectRole(container=bpmnModelAccess,type=BPMN_MESSAGE_FLOW);
			DeploymentCommunicationPath communicationPath with EMFObjectRole(container=deploymentModelAccess,type=DEPLOYMENT_COMMUNICATION_PATH);
			create::_create(required String nameMessage, required String nameCommPath) {
				messageFlow = select unique BPMNMessageFlow from bpmnModelAccess where (selected.name == parameters.nameMessage);
				communicationPath = select unique DeploymentCommunicationPath from deploymentModelAccess where (selected.name == parameters.nameCommPath);
			}

			// --- iTrust security Rule2 --- 
			/* This security rule check if the communicationPath in the BPMN model correponding to MessageFlow in the BPMN model 
			has semantically the same secuirty annotation  */

			public void iTrustSecurityRule2() {
				//boolean check = false;
           
				boolean check = this.verifySecureCommunication();
				if (check) {
					log "[iTrust - SecurityRule 2] -> Security rule verified";
				}
				else {
					log "[iTrust - SecurityRule 2] -> Security rule violated";
				}
			}

			// Verify if the communicationPath is encypted and MessageFlow contains at least one of these security annotations(NonRepudMF, ConfidentialityMF, IntegrityMF)
			private boolean verifySecureCommunication() {
				boolean check = false;
				List<? extends Object> encrypted = communicationPath.getValues("encrypted");
				for (BPMNAssociation association : select BPMNAssociation from bpmnModelAccess) {
					if (association.targetRef == messageFlow.toString.substring(12)) {
						for (BPMNTextAnnotation annotation : select BPMNTextAnnotation from bpmnModelAccess) {
							if (association.sourceRef.id == annotation.id) {
								if (encrypted != null && (annotation.text.contains("NonRepudMF") || annotation.text.contains("ConfidentialityMF") || annotation.text.contains("IntegrityMF"))) {
									check = true;
								}
							}
						}
					}
				}
				return check;
			}
			delete() {
				delete messageFlow;
				delete communicationPath;
			}
		}
		public concept UserRoleCorrespondence extends Correspondences {
			DataClass user with EMFObjectRole(container=dataModelAccess,type=DATA_CLASS);
			AccessControlRole role with EMFObjectRole(container=accessControlModelAccess,type=ACCESS_CONTROL_ROLE);
			create::_create(required String roleName, required String userName) {
				user = select unique DataClass from dataModelAccess where (selected.name == parameters.userName);
				role = select unique AccessControlRole from accessControlModelAccess where (selected.name == parameters.roleName);
			}
			delete() {
			}

			// --- iTrust security Rule7 ---
			/*  This security rule check if the user in the Data model correponds to a role in the AccessControl model 
			or this user inherit from other users that have a role   */

			public void iTrustSecurityRule7(required String nameUser) {
				boolean checked = false;
				boolean checkedInherit = false;
				checked = container.container.checkUserRole(parameters.nameUser);
				if (!checked) {
					// Whether no, verify if the instances of the concept UserRoleCorrespondence include the inheriting user
					for (DataClass itemUser : select DataClass from dataModelAccess) {
						if (itemUser.getValues("member").toString.contains(parameters.nameUser) && container.container.checkUserRole(itemUser.name)) {
							checkedInherit = true;
						}
					}
				}
				// Notify the user 
				if (checkedInherit) {
					log "[iTrust - SecurityRule 7] -> Security rule verified";
				}
				else {
					log "[iTrust - SecurityRule 7] -> Security rule violated";
				}
			}

			/*  These function verify whether the user and the role is not null 
		 	for an isntance of UserRoleCorreponeces  */

			private boolean verifyCorrespondence() {
				if (user == null || role == null) {
					return false;
				}
				else {
					return true;
				}
			}
		}
		public concept PoolClassCorrespondence extends Correspondences {
			BPMNParticipant pool with EMFObjectRole(container=bpmnModelAccess,type=BPMN_PARTICIPANT);
			DataClass class with EMFObjectRole(container=dataModelAccess,type=DATA_CLASS);
			create::_create(required String poolName, required String className) {
				pool = select unique BPMNParticipant from bpmnModelAccess where (selected.name == parameters.poolName);
				class = select unique DataClass from dataModelAccess where (selected.name == parameters.className);
			}

			// --- iTrust security Rule4 --- 
			/*  This security rule checks if the Pool in the BPMN model contains a confidential DataObject,
			the corresponding Class must have semantically the same security annotations  */

			public void iTrustSecurityRule4() {
				boolean checkConfidentialDataObject = false;
				List<BPMNFlowElements> listFlowElements = new ArrayList<BPMNFlowElements>();
				listFlowElements = container.container.getFlowElementsOfPool(pool);
				// Verify if there are confidential DataObjects between the FlowElements.
				checkConfidentialDataObject = container.container.verifyDataObjectAnnotation(listFlowElements);
				// Verify whether the corresponding class has the security annotation Critical when the Pool contains a confidential DataObject.
				if (checkConfidentialDataObject && class.getValues("member").toString.contains("Critical")) {
					log "[iTrust - SecurityRule 4] -> Security rule verified";
				}
				else {
					log "[iTrust - SecurityRule 4] -> Security rule violated";
				}
			}

        // --- iTrust security Rule17 --- 
        /*  when two Pools in the BPMN model(that correspond to Classes in the data model), contains a DataObject that is linked to the security annotations. 
        The Association between the classes corresponding to two Pools must be annotated with  Integrity or Secrecy  */
        
        public void iTrustSecurityRule17() {
           List<BPMNFlowElements> listFlowElements = new ArrayList<BPMNFlowElements>();  
           listFlowElements = container.container.getFlowElementsOfPool(pool);
           boolean checkCofidentialDataObject = container.container.verifyDataObjectAnnotation(listFlowElements);
           List<BPMNMessageFlow> messageFlowsPool = new ArrayList<BPMNMessageFlow>();
           messageFlowsPool = container.container.getMessageFlows(pool);
           for (BPMNMessageFlow itemMessageFlow : messageFlowsPool ) {
              BPMNParticipant associatedPool = container.container.getAssociatedPool(itemMessageFlow,pool);
              DataClass associatedClass = container.container.getAssociatedClass(associatedPool);
              if (associatedClass != null) {
                  boolean checkAssociationSecurityAnnotation = container.container.checkSecurityAnnotaionsOnAssociation(class,associatedClass);
                  if (checkAssociationSecurityAnnotation) {
                     log "[iTrust - SecurityRule 18] -> Security rule verified";
                  } 
else {
                     log "[iTrust - SecurityRule 18] -> Security rule violated";
                  }
                  } 
else{
                     log "[iTrust - SecurityRule 18] -> Security rule verified";
                 }
           }
           
        }

       // --- iTrust security Rule18 ---
       /*  when two Pools in the BPMN model(that correspond to Classes in the data model), contains a MessageFlow that is linked to the security annotations. 
        The Association between the classes corresponding to two Pools must be annotated with  Integrity or Secrecy  */
       public void iTrustSecurityRule18() {
           List<BPMNMessageFlow> messageFlowsPool = new ArrayList<BPMNMessageFlow>();
           messageFlowsPool = container.container.getMessageFlows(pool);
           List<BPMNMessageFlow> messageFlowsPoolWithFilter = new ArrayList<BPMNMessageFlow>();
           messageFlowsPoolWithFilter = container.container.getMessageFlowsWithFilter(messageFlowsPool);
           for (BPMNMessageFlow itemMessageFlow : messageFlowsPoolWithFilter ) {
              BPMNParticipant associatedPool = container.container.getAssociatedPool(itemMessageFlow,pool);
              DataClass associatedClass = container.container.getAssociatedClass(associatedPool);
              if (associatedClass != null) {
               boolean checkAssociationSecurityAnnotation = container.container.checkSecurityAnnotaionsOnAssociation(class,associatedClass);
               if (checkAssociationSecurityAnnotation) {
                  log "[iTrust - SecurityRule 18] -> Security rule verified";
               } 
else {
                  log "[iTrust - SecurityRule 18] -> Security rule violated";
               }
               } 
else{
                  log "[iTrust - SecurityRule 18] -> Security rule verified";
              }
           }
       }

       

	delete() {
		delete pool;
		delete class;
	}

		}
		public concept ClassArtifactCorrespondence extends Correspondences {
			DataClass class with EMFObjectRole(container=dataModelAccess,type=DATA_CLASS);
			DeploymentArtifact artifact with EMFObjectRole(container=deploymentModelAccess,type=DEPLOYMENT_ARTIFACT);
			create::_create(required String className, required String artifactName) {
				class = select unique DataClass from dataModelAccess where (selected.name == parameters.className);
				artifact = select unique DeploymentArtifact from deploymentModelAccess where (selected.name == parameters.artifactName);
			}

			// --- iTrust security Rule5 ---
			/*   when a Class in the Data model (that corresponds to artifact in the deployment model deployed in device), contains security
				annotation Critical. The communication Path between the corresponding device must be encrypted */

			public void iTrustSecurityRule5() {
				boolean checkAnnotation = container.container.ckeckSecurityAnnotationOnCommunicationPath(artifact);
				if (class.getValues("nestedClassifier").toString.contains("Critical") && checkAnnotation) {
					log "[iTrust - SecurityRule 5] -> Security rule verified";
				}
				else {
					log "[iTrust - SecurityRule 5] -> Security rule violated";
				}
			}

			// --- iTrust security Rule6 ---
			/* when a class in the data model (that correspond to artifact in the deployment model) annotated Critical. the associations relating 
			this artifact with other must to be annotated Secrecy or Integrity */

			public void iTrustSecurityRule6() {
				boolean checkAnnotation = container.container.checkSecurityAnnotaionsOnAssociation(artifact);
				if (class.getValues("nestedClassifier").toString.contains("Critical") && checkAnnotation) {
					log "[iTrust - SecurityRule 6] -> Security rule verified";
				}
				else {
					log "[iTrust - SecurityRule 6] -> Security rule violated";
				}
			}
			delete() {
				delete class;
				delete artifact;
			}

         // --- iTrust security Rule13 ---
         public void iTrustSecurity13() {
            List<String> associatedClass = new ArrayList<String>();
            associatedClass = container.container.getAssociatedClass(class);
            for (String itemClass : associatedClass) {
               DeploymentArtifact associatedArtifact = container.container.getArtifact(itemClass);
               boolean check = container.container.checkSecurityAnnotaionsOnAssociation(artifact,associatedArtifact);
               if (check) {
                  log "[iTrust - SecurityRule 13] -> Security rule verified";
               }  
else {
                  log "[iTrust - SecurityRule 13] -> Security rule violated";
               }
            }
           
         }
        
		}
		public concept ModelsCorrespondence extends Correspondences {
			DeploymentModel deployementModel with EMFObjectRole(container=deploymentModelAccess,type=DEPLOYMENT_DEPLOYEMENT_MODEL);
			DataModel dataModel with EMFObjectRole(container=dataModelAccess,type=DATA_MODEL);
			create::_create(required String deployementModelName, required String dataModelName) {
				deployementModel = select unique DeploymentModel from deploymentModelAccess where (selected.nameModel == parameters.deployementModelName);
				dataModel = select unique DataModel from dataModelAccess where (selected.name == parameters.dataModelName);
			}

			// --- iTrust security Rule11 ---
        	/*  when Data model annotated with annotated secureLink. The deployment model must contain at least one association annotated Integrity or Secrecy */

			public void iTrustSecurityRule11() {
				boolean checkAnnotation = container.container.checkSecurityAnnotationModel(dataModel);
            boolean checkAssociationAnnotation = container.container.checkAssociationAnnotation();
				log checkAnnotation.toString;
				if (checkAnnotation && checkAssociationAnnotation) {
					log "[iTrust - SecurityRule 11] -> Security rule verified";
				}
				else {
					log "[iTrust - SecurityRule 11] -> Security rule violated";
				}
			}
			delete() {
				delete deployementModel;
				delete dataModel;
			}

			// --- iTrust security Rule12 ---
        	/*  when Deployment model annotated with secure dependency.The data model must contain at least one one Class annotated Critical */
			public void iTrustSecurity12() {
			boolean checkAnnotation = container.container.checkSecurityAnnotationModels(deployementModel);
			if (checkAnnotation) {
				log "[iTrust - SecurityRule 12] -> Security rule verified";
			} 
	else {
				log "[iTrust - SecurityRule 12] -> Security rule violated";
			} 
			}
		
		}
      public concept TaskAuthorisationCorrespondence extends Correspondences {
        BPMNUserTask task with EMFObjectRole(container= bpmnModelAccess,type= BPMN_USER_TASK);
        AccessAuthorization authorization with EMFObjectRole(container=accessControlModelAccess,type=ACCESS_CONTROL_AUTHORIZATION); 
        create::_create(required String taskName, required String authorizationName) {
           authorization = select unique AccessAuthorization from accessControlModelAccess where (selected.name == parameters.authorizationName);
           task = select unique BPMNUserTask from bpmnModelAccess where (selected.name == parameters.taskName);
        }

       // --- iTrust security Rule15 ---
       /*  when exist dependecy between Authorization in the AccessControl model with task in the BPMN model.The task must contain IntegrityACt annotation and it is preceeded with a logIn task */

        public void iTrustSecurityRule15() {
         boolean checksecurityAnnotationTask = container.container.checkSecurityAnnotationTask(task);
         boolean checkLogInTask = container.container.checkLogInTask(task);
         if (checksecurityAnnotationTask && checkLogInTask) {
            log "[iTrust - SecurityRule 15] -> Security rule verified";
         } 
else {
            log "[iTrust - SecurityRule 15] -> Security rule violated";
         }
        }

         // --- iTrust security Rule16 ---
         /*  when exist dependecy between Authorization in the AccessControl model with task annotated integrityAct in the BPMN model.The pool containing this task must have the same name with the role having this authorization */

        public void iTrustSecurityRule16() {
         boolean checksecurityAnnotationTask = container.container.checkSecurityAnnotationTask(task);
         BPMNParticipant taskPoolContainer = container.container.getTaskPoolContainer(task);
         AccessControlRole authorizationRoleContainer = container.container.getRoleAuthorizationContainer(authorization);
         if (checksecurityAnnotationTask && taskPoolContainer.name == authorizationRoleContainer.nameRole) {
           log "[iTrust - SecurityRule 16] -> Security rule verified"; 
         }
else {
            log "[iTrust - SecurityRule 16] -> Security rule violated";
         }
        }
        
      }
      
		public concept OperationAuthorisationCorrespondence extends Correspondences {
			DataOperation operation with EMFObjectRole(container=dataModelAccess,type=DATA_OPERATION);
			AccessAuthorization authorization with EMFObjectRole(container=accessControlModelAccess,type=ACCESS_CONTROL_AUTHORIZATION);
			create::_create(required String operationName, required String authorizationName) {
				operation = select unique DataOperation from dataModelAccess where (selected.name == parameters.operationName);
				authorization = select unique AccessAuthorization from accessControlModelAccess where (selected.name == parameters.authorizationName);
			}

			// --- iTrust security Rule10 ---
			public void iTrustSecurityRule10() {
				boolean state = false;
				for (DataElementImport element : select DataElementImport from dataModelAccess) {
					if (element.getValues("owner").toString.contains(operation.name) && operation.getValues("elementImport").toString.contains("abacRequire")) {
						for (DataStereotype stereotype : select DataStereotype from dataModelAccess) {
							if (stereotype.name == "abacRequire" && stereotype.getValues("ownedMember").toString.contains("right") && stereotype.getValues("ownedMember").toString.contains("role")) {
								for (DataComment comment : select DataComment from dataModelAccess) {
									if (comment.getValues("owner").toString.contains("abacRequire") && comment.getValues("annotatedElement").toString.contains("role")) {
										for (AccessControlRole role : select AccessControlRole from accessControlModelAccess) {
											if (role.nameRole == comment.body && role.getValues("authorization").toString.contains(authorization.nameAuthorization)) {
												state = true;
											}
										}
									}
								}
							}
						}
					}
				}
				if (state) {
					log "[iTrust - SecurityRule 10] -> Security rule verified";
				}
				else {
					log "[iTrust - SecurityRule 10] -> Security rule violated";
				}
			}
			delete() {
				delete operation;
				delete authorization;
			}
		}
	}
}
